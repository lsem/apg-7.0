//
// This C-language parser header was generated by APG Version 7.0.
// User modifications invalidate the license agreement and may cause unpredictable results.
//
/*  *************************************************************************************
    Copyright (c) 2021, Lowell D. Thomas
    All rights reserved.

    This file was generated by and is part of APG Version 7.0.
    APG Version 7.0 may be used under the terms of the BSD 2-Clause License.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, this
       list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*   *************************************************************************************/

#ifndef _SABNF_GRAMMAR_H_
#define _SABNF_GRAMMAR_H_

// rule ids
#define SABNF_GRAMMAR_ABGOP 50
#define SABNF_GRAMMAR_AENOP 51
#define SABNF_GRAMMAR_ALPHANUM 87
#define SABNF_GRAMMAR_ALTERNATION 14
#define SABNF_GRAMMAR_ALTOP 44
#define SABNF_GRAMMAR_ANDOP 46
#define SABNF_GRAMMAR_BASICELEMENT 19
#define SABNF_GRAMMAR_BASICELEMENTERR 20
#define SABNF_GRAMMAR_BIN 77
#define SABNF_GRAMMAR_BKAOP 48
#define SABNF_GRAMMAR_BKNOP 49
#define SABNF_GRAMMAR_BKR_NAME 36
#define SABNF_GRAMMAR_BKRMODIFIER 31
#define SABNF_GRAMMAR_BKROP 30
#define SABNF_GRAMMAR_BLANKLINE 1
#define SABNF_GRAMMAR_BMAX 81
#define SABNF_GRAMMAR_BMIN 80
#define SABNF_GRAMMAR_BNUM 85
#define SABNF_GRAMMAR_BSTRING 74
#define SABNF_GRAMMAR_CATOP 45
#define SABNF_GRAMMAR_CI 33
#define SABNF_GRAMMAR_CLSCLOSE 62
#define SABNF_GRAMMAR_CLSOP 60
#define SABNF_GRAMMAR_CLSOPEN 61
#define SABNF_GRAMMAR_CLSSTRING 63
#define SABNF_GRAMMAR_COMMENT 91
#define SABNF_GRAMMAR_CONCATENATION 15
#define SABNF_GRAMMAR_CS 32
#define SABNF_GRAMMAR_DEC 75
#define SABNF_GRAMMAR_DEFINED 10
#define SABNF_GRAMMAR_DEFINEDAS 9
#define SABNF_GRAMMAR_DEFINEDASERROR 8
#define SABNF_GRAMMAR_DEFINEDASTEST 7
#define SABNF_GRAMMAR_DMAX 79
#define SABNF_GRAMMAR_DMIN 78
#define SABNF_GRAMMAR_DNUM 84
#define SABNF_GRAMMAR_DSTRING 72
#define SABNF_GRAMMAR_ENAME 39
#define SABNF_GRAMMAR_FILE 0
#define SABNF_GRAMMAR_GROUP 21
#define SABNF_GRAMMAR_GROUPCLOSE 24
#define SABNF_GRAMMAR_GROUPERROR 22
#define SABNF_GRAMMAR_GROUPOPEN 23
#define SABNF_GRAMMAR_HEX 76
#define SABNF_GRAMMAR_INCALT 11
#define SABNF_GRAMMAR_LINECONTINUE 93
#define SABNF_GRAMMAR_LINEEND 92
#define SABNF_GRAMMAR_LINEENDERROR 13
#define SABNF_GRAMMAR_MODIFIER 17
#define SABNF_GRAMMAR_NOTOP 47
#define SABNF_GRAMMAR_OPTION 25
#define SABNF_GRAMMAR_OPTIONCLOSE 28
#define SABNF_GRAMMAR_OPTIONERROR 26
#define SABNF_GRAMMAR_OPTIONOPEN 27
#define SABNF_GRAMMAR_OWSP 88
#define SABNF_GRAMMAR_PM 35
#define SABNF_GRAMMAR_PREDICATE 18
#define SABNF_GRAMMAR_PROSVAL 64
#define SABNF_GRAMMAR_PROSVALCLOSE 67
#define SABNF_GRAMMAR_PROSVALOPEN 65
#define SABNF_GRAMMAR_PROSVALSTRING 66
#define SABNF_GRAMMAR_REP_MAX 70
#define SABNF_GRAMMAR_REP_MIN 68
#define SABNF_GRAMMAR_REP_MIN_MAX 69
#define SABNF_GRAMMAR_REP_NUM 71
#define SABNF_GRAMMAR_REPETITION 16
#define SABNF_GRAMMAR_REPOP 43
#define SABNF_GRAMMAR_RNAME 37
#define SABNF_GRAMMAR_RNMOP 29
#define SABNF_GRAMMAR_RULE 2
#define SABNF_GRAMMAR_RULEERROR 12
#define SABNF_GRAMMAR_RULELOOKUP 3
#define SABNF_GRAMMAR_RULENAME 5
#define SABNF_GRAMMAR_RULENAMEERROR 6
#define SABNF_GRAMMAR_RULENAMETEST 4
#define SABNF_GRAMMAR_SPACE 90
#define SABNF_GRAMMAR_STRINGTAB 59
#define SABNF_GRAMMAR_TBSOP 53
#define SABNF_GRAMMAR_TLSCASE 55
#define SABNF_GRAMMAR_TLSCLOSE 57
#define SABNF_GRAMMAR_TLSOP 54
#define SABNF_GRAMMAR_TLSOPEN 56
#define SABNF_GRAMMAR_TLSSTRING 58
#define SABNF_GRAMMAR_TRGOP 52
#define SABNF_GRAMMAR_UDT_EMPTY 42
#define SABNF_GRAMMAR_UDT_NON_EMPTY 41
#define SABNF_GRAMMAR_UDTOP 40
#define SABNF_GRAMMAR_UM 34
#define SABNF_GRAMMAR_UNAME 38
#define SABNF_GRAMMAR_WSP 89
#define SABNF_GRAMMAR_XMAX 83
#define SABNF_GRAMMAR_XMIN 82
#define SABNF_GRAMMAR_XNUM 86
#define SABNF_GRAMMAR_XSTRING 73
#define RULE_COUNT_SABNF_GRAMMAR 94

// pointer to parser initialization data
extern void* vpSabnfGrammarInit;

// Helper function(s) for setting rule/UDT name callbacks.
// Un-comment and replace named NULL with pointer to the appropriate callback function.
//  NOTE: This can easily be modified for setting AST callback functions:
//        Replace parser_callback with ast_callback and
//        vParserSetRuleCallback(vpParserCtx) with vAstSetRuleCallback(vpAstCtx) and
//        vParserSetUdtCallback(vpParserCtx) with vAstSetUdtCallback(vpAstCtx).
/****************************************************************
void vSabnfGrammarRuleCallbacks(void* vpParserCtx){
    aint ui;
    parser_callback cb[RULE_COUNT_SABNF_GRAMMAR];
    cb[SABNF_GRAMMAR_ABGOP] = NULL;
    cb[SABNF_GRAMMAR_AENOP] = NULL;
    cb[SABNF_GRAMMAR_ALPHANUM] = NULL;
    cb[SABNF_GRAMMAR_ALTERNATION] = NULL;
    cb[SABNF_GRAMMAR_ALTOP] = NULL;
    cb[SABNF_GRAMMAR_ANDOP] = NULL;
    cb[SABNF_GRAMMAR_BASICELEMENT] = NULL;
    cb[SABNF_GRAMMAR_BASICELEMENTERR] = NULL;
    cb[SABNF_GRAMMAR_BIN] = NULL;
    cb[SABNF_GRAMMAR_BKAOP] = NULL;
    cb[SABNF_GRAMMAR_BKNOP] = NULL;
    cb[SABNF_GRAMMAR_BKR_NAME] = NULL;
    cb[SABNF_GRAMMAR_BKRMODIFIER] = NULL;
    cb[SABNF_GRAMMAR_BKROP] = NULL;
    cb[SABNF_GRAMMAR_BLANKLINE] = NULL;
    cb[SABNF_GRAMMAR_BMAX] = NULL;
    cb[SABNF_GRAMMAR_BMIN] = NULL;
    cb[SABNF_GRAMMAR_BNUM] = NULL;
    cb[SABNF_GRAMMAR_BSTRING] = NULL;
    cb[SABNF_GRAMMAR_CATOP] = NULL;
    cb[SABNF_GRAMMAR_CI] = NULL;
    cb[SABNF_GRAMMAR_CLSCLOSE] = NULL;
    cb[SABNF_GRAMMAR_CLSOP] = NULL;
    cb[SABNF_GRAMMAR_CLSOPEN] = NULL;
    cb[SABNF_GRAMMAR_CLSSTRING] = NULL;
    cb[SABNF_GRAMMAR_COMMENT] = NULL;
    cb[SABNF_GRAMMAR_CONCATENATION] = NULL;
    cb[SABNF_GRAMMAR_CS] = NULL;
    cb[SABNF_GRAMMAR_DEC] = NULL;
    cb[SABNF_GRAMMAR_DEFINED] = NULL;
    cb[SABNF_GRAMMAR_DEFINEDAS] = NULL;
    cb[SABNF_GRAMMAR_DEFINEDASERROR] = NULL;
    cb[SABNF_GRAMMAR_DEFINEDASTEST] = NULL;
    cb[SABNF_GRAMMAR_DMAX] = NULL;
    cb[SABNF_GRAMMAR_DMIN] = NULL;
    cb[SABNF_GRAMMAR_DNUM] = NULL;
    cb[SABNF_GRAMMAR_DSTRING] = NULL;
    cb[SABNF_GRAMMAR_ENAME] = NULL;
    cb[SABNF_GRAMMAR_FILE] = NULL;
    cb[SABNF_GRAMMAR_GROUP] = NULL;
    cb[SABNF_GRAMMAR_GROUPCLOSE] = NULL;
    cb[SABNF_GRAMMAR_GROUPERROR] = NULL;
    cb[SABNF_GRAMMAR_GROUPOPEN] = NULL;
    cb[SABNF_GRAMMAR_HEX] = NULL;
    cb[SABNF_GRAMMAR_INCALT] = NULL;
    cb[SABNF_GRAMMAR_LINECONTINUE] = NULL;
    cb[SABNF_GRAMMAR_LINEEND] = NULL;
    cb[SABNF_GRAMMAR_LINEENDERROR] = NULL;
    cb[SABNF_GRAMMAR_MODIFIER] = NULL;
    cb[SABNF_GRAMMAR_NOTOP] = NULL;
    cb[SABNF_GRAMMAR_OPTION] = NULL;
    cb[SABNF_GRAMMAR_OPTIONCLOSE] = NULL;
    cb[SABNF_GRAMMAR_OPTIONERROR] = NULL;
    cb[SABNF_GRAMMAR_OPTIONOPEN] = NULL;
    cb[SABNF_GRAMMAR_OWSP] = NULL;
    cb[SABNF_GRAMMAR_PM] = NULL;
    cb[SABNF_GRAMMAR_PREDICATE] = NULL;
    cb[SABNF_GRAMMAR_PROSVAL] = NULL;
    cb[SABNF_GRAMMAR_PROSVALCLOSE] = NULL;
    cb[SABNF_GRAMMAR_PROSVALOPEN] = NULL;
    cb[SABNF_GRAMMAR_PROSVALSTRING] = NULL;
    cb[SABNF_GRAMMAR_REP_MAX] = NULL;
    cb[SABNF_GRAMMAR_REP_MIN] = NULL;
    cb[SABNF_GRAMMAR_REP_MIN_MAX] = NULL;
    cb[SABNF_GRAMMAR_REP_NUM] = NULL;
    cb[SABNF_GRAMMAR_REPETITION] = NULL;
    cb[SABNF_GRAMMAR_REPOP] = NULL;
    cb[SABNF_GRAMMAR_RNAME] = NULL;
    cb[SABNF_GRAMMAR_RNMOP] = NULL;
    cb[SABNF_GRAMMAR_RULE] = NULL;
    cb[SABNF_GRAMMAR_RULEERROR] = NULL;
    cb[SABNF_GRAMMAR_RULELOOKUP] = NULL;
    cb[SABNF_GRAMMAR_RULENAME] = NULL;
    cb[SABNF_GRAMMAR_RULENAMEERROR] = NULL;
    cb[SABNF_GRAMMAR_RULENAMETEST] = NULL;
    cb[SABNF_GRAMMAR_SPACE] = NULL;
    cb[SABNF_GRAMMAR_STRINGTAB] = NULL;
    cb[SABNF_GRAMMAR_TBSOP] = NULL;
    cb[SABNF_GRAMMAR_TLSCASE] = NULL;
    cb[SABNF_GRAMMAR_TLSCLOSE] = NULL;
    cb[SABNF_GRAMMAR_TLSOP] = NULL;
    cb[SABNF_GRAMMAR_TLSOPEN] = NULL;
    cb[SABNF_GRAMMAR_TLSSTRING] = NULL;
    cb[SABNF_GRAMMAR_TRGOP] = NULL;
    cb[SABNF_GRAMMAR_UDT_EMPTY] = NULL;
    cb[SABNF_GRAMMAR_UDT_NON_EMPTY] = NULL;
    cb[SABNF_GRAMMAR_UDTOP] = NULL;
    cb[SABNF_GRAMMAR_UM] = NULL;
    cb[SABNF_GRAMMAR_UNAME] = NULL;
    cb[SABNF_GRAMMAR_WSP] = NULL;
    cb[SABNF_GRAMMAR_XMAX] = NULL;
    cb[SABNF_GRAMMAR_XMIN] = NULL;
    cb[SABNF_GRAMMAR_XNUM] = NULL;
    cb[SABNF_GRAMMAR_XSTRING] = NULL;
    for(ui = 0; ui < (aint)RULE_COUNT_SABNF_GRAMMAR; ui++){
        vParserSetRuleCallback(vpParserCtx, ui, cb[ui]);
    }
}
****************************************************************/

#endif /* _SABNF_GRAMMAR_H_ */
